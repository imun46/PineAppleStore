<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itwill.shop.mapper.CustomerMapper">

	<!--Customer 기본 맵-->
	<resultMap id="customerMapBasic" type="Customer" autoMapping="true">
		<id column="CUSTOMER_NO" property="customerNo"/>
		<result column="CUSTOMER_ID" property="customerId"/>
		<result column="CUSTOMER_PASSWORD" property="customerPassword"/>
		<result column="CUSTOMER_NAME" property="customerName"/>
		<result column="CUSTOMER_DOB" property="customerDob"/>
		<result column="CUSTOMER_ADDRESS" property="customerAddress"/>
		<result column="CUSTOMER_GENDER" property="customerGender"/>
		<result column="CUSTOMER_PHONE" property="customerPhone"/>
		<result column="CUSTOMER_EMAIL" property="customerEmail"/>
		<result column="CUSTOMER_NICKNAME" property="customerNickname"/>
		<result column="CUSTOMER_JOINDATE" property="customerJoindate"/>
	</resultMap>

	<!-- 회원 등록 -->
	<insert id="insertCustomer" parameterType="Customer">
		<selectKey order="BEFORE" resultType="int" keyProperty="customerNo">
			SELECT customer_customer_no_seq.nextval FROM DUAL
		</selectKey>
		INSERT INTO customer(customer_no, customer_id, customer_password, customer_name, customer_dob, customer_address, customer_gender, customer_phone, customer_email, customer_nickname, customer_joindate)
		VALUES (#{customerNo},
				#{customerId},
				#{customerPassword},
				#{customerName},
				#{customerDob},
				#{customerAddress},
				#{customerGender},
				#{customerPhone},
				#{customerEmail},
				#{customerNickname},
				sysdate)
	</insert>

	<!-- 회원 아이디 중복체크 -->
	<select id="countCustomerId" parameterType="String">
		SELECT count(*)
		  FROM customer
		 WHERE customer_id=#{customer_id}
	</select>

	<!-- 회원 닉네임 중복 체크 -->
	<select id="countCustomerNickname" parameterType="String">
		SELECT count(*)
		  FROM customer
		 WHERE customer_nickname=#{customer_nickname}
	</select>

	<!-- 회원 핸드폰 번호 중복 체크 -->
	<select id="countCustomerPhone" parameterType="String">
		SELECT count(*)
		  FROM customer
		 WHERE customer_phone=#{customer_phone}
	</select>
	
	<!-- 회원 아이디/비밀번호 일치 여부 체크 후 회원 번호 반환 -->
	<select id="getCustomerNoIfValidLogin" parameterType="map" resultType="Integer">
		SELECT customer_no
  		  FROM customer
 		 WHERE customer_id=#{customerId}
       		   AND customer_password=#{customerPassword}
	</select>

	<!-- 회원 아이디로 회원 정보 반환 -->
	<select id="findCustomerById" parameterType="String" resultType="Customer">
		SELECT customer_no, customer_id, customer_name, customer_dob, customer_address, customer_gender,
		       customer_phone, customer_email, customer_nickname, customer_joindate
		  FROM customer
		 WHERE customer_id=#{customerId}
	</select>


	<!-- 회원 번호로 회원 정보 반환 -->
	<select id="findCustomerByNo" parameterType="int" resultType="Customer">
		SELECT customer_no, customer_id, customer_name, customer_dob, customer_address, customer_gender,
		       customer_phone, customer_email, customer_nickname, customer_joindate
		  FROM customer
		 WHERE customer_no=#{customerNo}
	</select>

	<!-- 회원 정보 수정 -->
	<update id="updateCustomer" parameterType="Customer">
		UPDATE customer
		   SET customer_password = #{customerPassword},
			   customer_address = #{customerAddress},
			   customer_gender = #{customerGender},
			   customer_phone = #{customerPhone},
			   customer_email = #{customerEmail},
			   customer_nickname = #{customerNickname}
		 WHERE customer_no = #{customerNo}
	</update>

	<!-- 회원 삭제 -->
	<delete id="deleteCustomer" parameterType="int">
		DELETE FROM customer
		 WHERE customer_no=#{customer_no}
	</delete>


	<!--전체 회원 리스트 반환 (어드민) -->
	<select id="customerList" resultType="Customer">
		SELECT customer_no, customer_id, customer_name, customer_dob, customer_address, customer_gender,
		       customer_phone, customer_email, customer_nickname, customer_joindate
		  FROM customer
	</select>


</mapper>

